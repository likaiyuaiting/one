//题目：任意给定一个正整数N，求一个最小的正整数M(M>1)，
//使得N*M的十进制表示形式里只含有1和0.

#include<iostream>  
#include<cmath>  
#include<vector> 
#include<stdlib.h>
using namespace std;
bool FindNumber(int N, vector<int> *BigInt);
int main()
{
	int N, i;
	cout << "Input a positive integer: ";
	cin >> N;
	vector<int> *BigInt = new vector<int>[N];//用来存放余数为0 ~ N最小数字，数字表示，如整数1001，则存为1001=10^0+10^3=(0,3)，适合大数的表示  
	for (i = 0; i<N; i++)
		BigInt[i].clear();
	bool found = FindNumber(N, BigInt);
	if (found)
	{
		int len = BigInt[0][BigInt[0].size() - 1] + 1;
		char *product = new char[len + 1];
		int product2 = 0;
		for (i = 0; i<len; i++)
			product[i] = '0';
		product[len] = '\0';
		vector<int>::iterator iter;
		for (iter = BigInt[0].begin(); iter != BigInt[0].end(); iter++)
		{
			product2 = product2 + pow(10, *iter);
			product[*iter] = '1';
		}
		int j = len - 1;
		i = 0;
		while (i<j)
		{
			char tmp = product[j];
			product[j] = product[i];
			product[i] = tmp;
			i++;
			j--;
		}
		int M = product2 / N;
		//product和product2都对应着乘积结果，但是product2对应着整型，乘积过大时，product2可能不会得到正确的结果；  
		//product对应着乘积的字符串，可以表示大数的乘积结果，M为product2/N，即为要求的数，当product2溢出时，不是正确的结果,  
		//那种情况下，需要用product/N，其中product为乘积的字符串表示，这里没有求解，读者可以自行解决。  
		cout << N << " * " << M << " = " << product << " , " << product2 << endl;
		delete[]product;
	}
	else
		cout << "Can not find M!" << endl;
	delete[]BigInt;
	system("pause");
	return 0;
}
bool FindNumber(int N, vector<int> *BigInt)
{
	int i, j, k;
	BigInt[1].push_back(0);
	int NoUpdate = 0;
	for (i = 1, j = 10 % N;; i++, j = (j * 10) % N)
	{
		bool flag = false;
		if (BigInt[j].size() == 0)
		{
			flag = true;
			// BigInt[j]=10^i,(10^i)%N=j  
			BigInt[j].clear();
			BigInt[j].push_back(i);
		}
		for (k = 1; k<N; k++)
		{
			//有新的余数出现  
			if ((BigInt[k].size()>0) && (i>BigInt[k][BigInt[k].size() - 1])
				&& (BigInt[(k + j) % N].size() == 0))
			{
				//BigInt[(k+j)%N]=10^i+BigInt[k]  
				flag = true;
				BigInt[(k + j) % N] = BigInt[k];
				BigInt[(k + j) % N].push_back(i);
			}
		}
		if (flag == false)
			NoUpdate++;
		else
			NoUpdate = 0;
		//如果经过一个循环节都没能对BigInt进行更新，就是无解，跳出,  
		//若有N次没更新过余数信息，则存在c>=0,10^(c+1)modN,...,10^(c+N)modN中必有两个是相等的，  
		//那么继续进行下去也不会再更新了  
		//或者BigInt[0]!=NULL,已经找到解，也跳出.  
		if (NoUpdate == N || BigInt[0].size()>0)//若有N次没更新过余数信息，则存在c>=0,10^(c+1)modN,...,10^(c+N)modN中必有两个是相等的，那么继续进行下去也不会再更新了  
			break;
	}
	if (BigInt[0].size() == 0)
		return false;
	else
		return true;
}

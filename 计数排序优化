/*
**原数组  8 7 5 4 9 6 2 2
**1、遍历数组找到最大值max=9和最小值min=2
**2、开辟max+1个空间的临时数组：int* tmp = new int[max-min+1]
**   将tmp数组初值赋值为0：memset(tmp,0,sizeof(int)*(max-min+1))
**3、遍历原数组，将数据作为tmp数组的下标的位置++
**   得到tmp： 2 0 1 1 1 1 1 1
**     index： 0 1 2 3 4 5 6 7
**4、将tmp中不为0的元素的下标依次烤进原数组：
**   得到：2 2 4 5 6 7 8 9
**   排序完成
**5、优化目的（防止开辟很多无用空间）
*/

#include<stdio.h>
#include<stdlib.h>
#include<memory.h> //#include<string.h> 

int main(void)
{
	int i, j = 0, max,min,n, a[] = { 4, 7,4,15,16,17,13 };
	n = sizeof(a) / sizeof(a[0]);
	max = a[0]; min = a[0];
	for (i = 1; i < n; i++)
	{
		if (a[i]>max)
			max = a[i];
		if (a[i]<min)
			min = a[i];
	}
	int* temp = new int[max-min + 1];
	memset(temp, 0, sizeof(int)*(max-min+ 1));
	//int temp[10] = { 0 };
	for (i = 0; i < n; i++)
		temp[a[i]-min]++;
	for (i = 0; i < max - min + 1; i++)
	while (temp[i]--)
	{
		a[j++] = i+min;
	}
	for (i = 0; i < j; i++)
	{
		printf("%d\t", a[i]);
	}
	delete temp;
	system("pause");
	return 0;
}
